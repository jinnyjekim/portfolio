{"version":3,"sources":["Projects.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Projects","year","title","summary","thumbnail","href","src","alt","className","slice","Header","Footer","App","state","isLoading","projects","getmovies","a","async","axios","get","data","movies","console","log","setState","this","map","project","key","id","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAyBeA,MAtBf,YAAoD,EAAjCC,KAAkC,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,UACrC,OACI,oCACI,4BACI,uBAAGC,KAAK,yBACJ,yBAAKC,IAAKF,EAAWG,IAAKL,EAAOA,MAAOA,IACxC,4BAAKA,GACL,uBAAGM,UAAU,WAAWL,EAAQM,MAAM,EAAE,UCS7CC,EAjBA,WACX,OACI,oCACI,gCACI,4BAAI,uBAAGL,KAAK,KAAR,sBACJ,6BACI,4BACI,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,mBCCbM,EAVA,WACX,OACI,oCACI,0DC+CGC,G,iNA5CbC,MAAQ,CACNC,WAAW,EACXC,SAAU,I,EAEZC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAKAE,IAAMC,IAAI,6DALV,gBAGQL,EAHR,EAERM,KACEA,KAAOC,OAGXC,QAAQC,IAAIT,GACZ,EAAKU,SAAS,CAACV,WAAUD,WAAU,IAPzB,sC,mFAUVY,KAAKV,c,+BAEG,IAAD,EACoBU,KAAKb,MAAzBC,EADA,EACAA,UAAUC,EADV,EACUA,SACjB,OACE,oCACE,kBAAC,EAAD,MACA,6BAASP,UAAU,aACjB,4CACA,wBAAIA,UAAU,QACXM,EACC,yBAAKN,UAAU,UACb,0BAAMA,UAAU,eAAhB,eAGEO,EAASY,KAAI,SAAAC,GAAO,OAClB,kBAAC,EAAD,CAAUC,IAAKD,EAAQE,GAAI7B,KAAM2B,EAAQ3B,KAAMC,MAAO0B,EAAQ1B,MAAOC,QAASyB,EAAQzB,QAASC,UAAWwB,EAAQG,0BAKhI,kBAAC,EAAD,W,GApCYC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a987cbf4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Projects({year, title, summary, thumbnail}){\r\n    return(\r\n        <>            \r\n            <li>\r\n                <a href=\"http://wwww.naver.com\"> \r\n                    <img src={thumbnail} alt={title} title={title}/>\r\n                    <h3>{title}</h3>\r\n                    <p className=\"summary\">{summary.slice(0,140)}</p>\r\n                </a>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nProjects.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    thumbnail: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1><a href=\"#\">Jinny's Portfolio</a></h1>\r\n                <nav>\r\n                    <ul>\r\n                        <li><a href=\"#\">About</a></li>\r\n                        <li><a href=\"#\">Skill</a></li>\r\n                        <li><a href=\"#\">Portfolio</a></li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n            <footer>\r\n                copyright &copy; Jinny\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport axios from 'axios';\nimport Projects from './Projects';\nimport Header from './Header';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    projects: []\n  };\n  getmovies = async () => {\n    const {\n      data:{\n        data: {movies:projects} //디스트럭쳐링\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log(projects);\n    this.setState({projects, isLoading:false})\n  }\n  componentDidMount(){\n    this.getmovies();\n  }\n  render() {\n    const {isLoading,projects}=this.state;\n    return (\n      <>\n        <Header/>\n        <section className=\"portfolio\">\n          <h2>Project list</h2>\n          <ul className=\"list\">\n            {isLoading ? (\n              <div className=\"loader\">\n                <span className=\"loader-text\">Loading...</span>\n              </div>\n              ) : (\n                  projects.map(project => (\n                    <Projects key={project.id} year={project.year} title={project.title} summary={project.summary} thumbnail={project.medium_cover_image} />\n                  ))\n              )}\n          </ul>\n        </section>\n      <Footer/>\n      </>\n    )\n  }\n}\n\n//https://yts-proxy.now.sh/list_movies.json\n//https://yts-proxy.now.sh/movies_detail.json\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}